SimpleForm['Connections'] = function (name, required) {
	this.base = null;
	this['Name'] = name;
	this._required = !!required;
	this.fields = [];
	this.errors = {};
};
SimpleForm['Connections'].prototype = {
	'Init': function (base) {
		this.base = base;
		this.fields = base.Form[this['Name']];
		var scope = this,
			addEvent = this.base.AddEvent;
		for (var i = 0, l = this.fields['length']; i < l; i += 1) {
			addEvent(this.fields[i], 'change', function () {
				scope.changeHandler();
			});
		};
		this.changeHandler();
	},
	changeHandler: function () {
		this.completeErrors();
		this.setUpErrorClasses();
	},
	completeErrors: function () {
		var field = {},
			values = {},
			value = '',
			intValue = 0,
			intsRegExp = /[^0-9]/g;
		this.errors = {};
		for (var i = 0, l = this.fields['length']; i < l; i += 1) {
			field = this.fields[i];
			value = field['value']['replace'](intsRegExp, '');
			intValue = parseInt(value, 10);
			if (value['length'] > 0 && !(intValue > 0 && intValue < l + 1)) {
				this.errors[i] = true;
			} else if (value['length'] > 0 && typeof(values[value]) == 'undefined') {
				values[value] = i;
			} else if (value['length'] > 0) {
				this.errors[i] = true;
				this.errors[values[value]] = true;
			}
		}
	},
	setUpErrorClasses: function () {
		var field = {},
			label = {},
			base = this.base,
			addCls = base.AddCls,
			removeCls = base.RemoveCls,
			errorClsStr = 'error';
		for (var i = 0, l = this.fields['length']; i < l; i += 1) {
			field = this.fields[i];
			label = field['parentNode'];
			if (this.errors[i]) {
				addCls(field, errorClsStr);
				addCls(label, errorClsStr);
			} else {
				removeCls(field, errorClsStr);
				removeCls(label, errorClsStr);
			}
		}
	}
}